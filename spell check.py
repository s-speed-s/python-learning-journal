import re

#list generated by GPT
def generate_test_files():
    dictionary_words = [
        "apple", "banana", "orange", "grape", "peach",
        "mango", "lemon", "pear", "plum", "cherry",
        "kiwi", "melon", "berry", "lime", "apricot"
    ]

    document_text = """
    I ate an apple and a kiwi, but the bananna was bad.
    The orangge juice was fine, and I found a grap and plum too.
    However, no mangoes or berrys today.
    """

    with open("dictionary.txt", "w") as f:
        for word in dictionary_words:
            f.write(word + "\n")

    with open("document.txt", "w") as f:
        f.write(document_text.strip())


# AVL tree from class
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
        self.height = 0

class AVLTree:
    def __init__(self):
        self.root = None

    def getHeight(self, node):
        return -1 if node is None else node.height

    def calcHeight(self, node):
        return max(self.getHeight(node.left), self.getHeight(node.right)) + 1

    def getBalance(self, node):
        return self.getHeight(node.left) - self.getHeight(node.right)

    def rightRotate(self, current):
        new = current.left
        t = new.right
        new.right = current
        current.left = t

        current.height = self.calcHeight(current)
        new.height = self.calcHeight(new)
        return new

    def leftRotate(self, current):
        new = current.right
        t = new.left
        new.left = current
        current.right = t

        current.height = self.calcHeight(current)
        new.height = self.calcHeight(new)
        return new

    def leftRightRotate(self, current):
        current.left = self.leftRotate(current.left)
        return self.rightRotate(current)

    def rightLeftRotate(self, current):
        current.right = self.rightRotate(current.right)
        return self.leftRotate(current)

    def insert(self, data):
        self.root = self._insert(self.root, data)

    def _insert(self, node, data):
        if not node:
            return Node(data)
        elif data < node.data:
            node.left = self._insert(node.left, data)
        elif data > node.data:
            node.right = self._insert(node.right, data)
        else:
            return node

        node.height = self.calcHeight(node)
        balance = self.getBalance(node)

        if balance > 1 and data < node.left.data:
            return self.rightRotate(node)
        if balance < -1 and data > node.right.data:
            return self.leftRotate(node)
        if balance > 1 and data > node.left.data:
            return self.leftRightRotate(node)
        if balance < -1 and data < node.right.data:
            return self.rightLeftRotate(node)

        return node

    def search(self, word):
        return self._search(self.root, word)

    def _search(self, node, word):
        if node is None:
            return False
        if word == node.data:
            return True
        elif word < node.data:
            return self._search(node.left, word)
        else:
            return self._search(node.right, word)

    def inorder(self):
        self._inorder(self.root)

    def _inorder(self, node):
        if node:
            self._inorder(node.left)
            print(f"{node.data} (balance: {self.getBalance(node)})")
            self._inorder(node.right)


# spell check
def read_words_from_file(filename):
    with open(filename, 'r') as f:
        content = f.read().lower()
        return re.findall(r'\b[a-z]+\b', content)

def load_dictionary(filename):
    tree = AVLTree()
    words = read_words_from_file(filename)
    for word in words:
        tree.insert(word)
    return tree

def spell_check(document_filename, dictionary_tree):
    document_words = read_words_from_file(document_filename)
    misspelled = set()
    for word in document_words:
        if not dictionary_tree.search(word):
            misspelled.add(word)
    return misspelled


# test
generate_test_files()
dictionary_tree = load_dictionary("dictionary.txt")
misspelled_words = spell_check("document.txt", dictionary_tree)

print("\n--- Misspelled Words ---")
for word in sorted(misspelled_words):
    print(word)

print("\n--- Dictionary (Inorder with Balance) ---")
dictionary_tree.inorder()
