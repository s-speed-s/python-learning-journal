import random
import uuid
import time
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Function to generate random sales data
def generate_random_sales_data(size):
    """Generates a list of random sales data with a given size."""
    products = ["Widget", "Gadget", "Thingamajig", "Doohickey"]
    start_date = datetime(2023, 1, 1)
    sales_data = []
    seen_ids = set()

    for _ in range(size):
        sale_id = uuid.uuid4().hex[:8]
        while sale_id in seen_ids:
            sale_id = uuid.uuid4().hex[:8]  # Ensure unique ID
        seen_ids.add(sale_id)
        
        sale_date = start_date + timedelta(days=random.randint(0, 365))
        amount = round(random.uniform(50, 500), 2)
        product = random.choice(products)

        sales_data.append({
            "sale_id": sale_id,
            "sale_date": sale_date.strftime('%Y-%m-%d'),
            "amount": amount,
            "product": product
        })
    
    return sales_data

# Function to get the latest sale (most recent date)
# generated by ChatGPT-4o
def get_latest_sale(sales):
    if not sales:
        return None
    return max(sales, key=lambda x: x['sale_date'])

# Function to compute total revenue
# generated by ChatGPT-4o
def compute_total_revenue(sales):
    return sum(sale['amount'] for sale in sales) if sales else 0

# Function to check for duplicate sale IDs
def check_duplicate_ids(sales):
    seen = []
    duplicates = []
    for sale in sales:
        if sale['sale_id'] in seen:
            duplicates.add(sale['sale_id'])
        seen.add(sale['sale_id'])
    return duplicates

# search for a sale by ID
# generated by ChatGPT-4o
def search_sale_by_id(sales, sale_id):
    return next((sale for sale in sales if sale['sale_id'] == sale_id), None)

# data to input into graph
def measure_performance(dataset_sizes):
    results = {
        "load_time": [], "latest_sale_time": [],
        "total_revenue_time": [], "duplicate_check_time": [], "search_time": []
    }
    
    for size in dataset_sizes:
        # Generate sales data in-memory instead of CSV
        #start = time.time()
        sales = generate_random_sales_data(size)  
        #results["load_time"].append(time.time() - start)
        
        # finding the latest sale
        start = time.time()
        get_latest_sale(sales)
        results["latest_sale_time"].append(time.time() - start)
        
        # computing total revenue
        start = time.time()
        compute_total_revenue(sales)
        results["total_revenue_time"].append(time.time() - start)
        
        # duplicate ID check
        start = time.time()
        check_duplicate_ids(sales)
        results["duplicate_check_time"].append(time.time() - start)
        
        # searching for a sale ID (use middle record's ID if available)
        if sales:
            test_id = sales[len(sales)//2]['sale_id']
            start = time.time()
            search_sale_by_id(sales, test_id)
            results["search_time"].append(time.time() - start)
        else:
            results["search_time"].append(0)
    
    return results

# plotting performance results
def plot_results(dataset_sizes, results):
    plt.figure(figsize=(10, 6))
    
    for key, times in results.items():
        # generated by ChatGPT-4o
        plt.plot(dataset_sizes, times, marker='o', linestyle='-', label=key.replace('_', ' ').title())
    
    plt.xlabel("Dataset Size (Number of Records)")
    plt.ylabel("Time Taken (Seconds)")
    plt.title("Execution Time vs. Dataset Size")
    plt.xscale("log")
    # generated by ChatGPT-4o
    plt.xticks(dataset_sizes, labels=[str(size) for size in dataset_sizes]) 
    plt.legend()
    plt.grid(True, linestyle="--", linewidth=0.5)
    plt.show()

# data sizes
dataset_sizes = [100, 1000, 10000, 100000]
results = measure_performance(dataset_sizes)
plot_results(dataset_sizes, results)
